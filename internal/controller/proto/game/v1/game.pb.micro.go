// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: game/v1/game.proto

package gamev1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GameService service

func NewGameServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GameService service

type GameService interface {
	// Games returns all games to join.
	Games(ctx context.Context, in *GamesReq, opts ...client.CallOption) (*GamesResp, error)
	// Join tries to select game by ID.
	Join(ctx context.Context, in *JoinReq, opts ...client.CallOption) (*JoinResp, error)
	// Ready returns info when game prepare to start or start.
	Ready(ctx context.Context, in *ReadyReq, opts ...client.CallOption) (*ReadyResp, error)
}

type gameService struct {
	c    client.Client
	name string
}

func NewGameService(name string, c client.Client) GameService {
	return &gameService{
		c:    c,
		name: name,
	}
}

func (c *gameService) Games(ctx context.Context, in *GamesReq, opts ...client.CallOption) (*GamesResp, error) {
	req := c.c.NewRequest(c.name, "GameService.Games", in)
	out := new(GamesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) Join(ctx context.Context, in *JoinReq, opts ...client.CallOption) (*JoinResp, error) {
	req := c.c.NewRequest(c.name, "GameService.Join", in)
	out := new(JoinResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) Ready(ctx context.Context, in *ReadyReq, opts ...client.CallOption) (*ReadyResp, error) {
	req := c.c.NewRequest(c.name, "GameService.Ready", in)
	out := new(ReadyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameService service

type GameServiceHandler interface {
	// Games returns all games to join.
	Games(context.Context, *GamesReq, *GamesResp) error
	// Join tries to select game by ID.
	Join(context.Context, *JoinReq, *JoinResp) error
	// Ready returns info when game prepare to start or start.
	Ready(context.Context, *ReadyReq, *ReadyResp) error
}

func RegisterGameServiceHandler(s server.Server, hdlr GameServiceHandler, opts ...server.HandlerOption) error {
	type gameService interface {
		Games(ctx context.Context, in *GamesReq, out *GamesResp) error
		Join(ctx context.Context, in *JoinReq, out *JoinResp) error
		Ready(ctx context.Context, in *ReadyReq, out *ReadyResp) error
	}
	type GameService struct {
		gameService
	}
	h := &gameServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GameService{h}, opts...))
}

type gameServiceHandler struct {
	GameServiceHandler
}

func (h *gameServiceHandler) Games(ctx context.Context, in *GamesReq, out *GamesResp) error {
	return h.GameServiceHandler.Games(ctx, in, out)
}

func (h *gameServiceHandler) Join(ctx context.Context, in *JoinReq, out *JoinResp) error {
	return h.GameServiceHandler.Join(ctx, in, out)
}

func (h *gameServiceHandler) Ready(ctx context.Context, in *ReadyReq, out *ReadyResp) error {
	return h.GameServiceHandler.Ready(ctx, in, out)
}
