// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: action/v1/action.proto

package actionv1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ActionService service

func NewActionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ActionService service

type ActionService interface {
	// Info return info about player
	Info(ctx context.Context, in *InfoReq, opts ...client.CallOption) (*InfoResp, error)
	// Rotate tries to rotate player's object.
	Rotate(ctx context.Context, in *RotateReq, opts ...client.CallOption) (*RotateResp, error)
	// Move tries to move player's object.
	Move(ctx context.Context, in *MoveReq, opts ...client.CallOption) (*MoveResp, error)
	// Shoot tries to shoot by player's object.
	Shoot(ctx context.Context, in *ShootReq, opts ...client.CallOption) (*ShootResp, error)
	// Vision tries to vision by player's object.
	Vision(ctx context.Context, in *VisionReq, opts ...client.CallOption) (*VisionResp, error)
	// Radar tries to radar by player's object.
	Radar(ctx context.Context, in *RadarReq, opts ...client.CallOption) (*RadarResp, error)
}

type actionService struct {
	c    client.Client
	name string
}

func NewActionService(name string, c client.Client) ActionService {
	return &actionService{
		c:    c,
		name: name,
	}
}

func (c *actionService) Info(ctx context.Context, in *InfoReq, opts ...client.CallOption) (*InfoResp, error) {
	req := c.c.NewRequest(c.name, "ActionService.Info", in)
	out := new(InfoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) Rotate(ctx context.Context, in *RotateReq, opts ...client.CallOption) (*RotateResp, error) {
	req := c.c.NewRequest(c.name, "ActionService.Rotate", in)
	out := new(RotateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) Move(ctx context.Context, in *MoveReq, opts ...client.CallOption) (*MoveResp, error) {
	req := c.c.NewRequest(c.name, "ActionService.Move", in)
	out := new(MoveResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) Shoot(ctx context.Context, in *ShootReq, opts ...client.CallOption) (*ShootResp, error) {
	req := c.c.NewRequest(c.name, "ActionService.Shoot", in)
	out := new(ShootResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) Vision(ctx context.Context, in *VisionReq, opts ...client.CallOption) (*VisionResp, error) {
	req := c.c.NewRequest(c.name, "ActionService.Vision", in)
	out := new(VisionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) Radar(ctx context.Context, in *RadarReq, opts ...client.CallOption) (*RadarResp, error) {
	req := c.c.NewRequest(c.name, "ActionService.Radar", in)
	out := new(RadarResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActionService service

type ActionServiceHandler interface {
	// Info return info about player
	Info(context.Context, *InfoReq, *InfoResp) error
	// Rotate tries to rotate player's object.
	Rotate(context.Context, *RotateReq, *RotateResp) error
	// Move tries to move player's object.
	Move(context.Context, *MoveReq, *MoveResp) error
	// Shoot tries to shoot by player's object.
	Shoot(context.Context, *ShootReq, *ShootResp) error
	// Vision tries to vision by player's object.
	Vision(context.Context, *VisionReq, *VisionResp) error
	// Radar tries to radar by player's object.
	Radar(context.Context, *RadarReq, *RadarResp) error
}

func RegisterActionServiceHandler(s server.Server, hdlr ActionServiceHandler, opts ...server.HandlerOption) error {
	type actionService interface {
		Info(ctx context.Context, in *InfoReq, out *InfoResp) error
		Rotate(ctx context.Context, in *RotateReq, out *RotateResp) error
		Move(ctx context.Context, in *MoveReq, out *MoveResp) error
		Shoot(ctx context.Context, in *ShootReq, out *ShootResp) error
		Vision(ctx context.Context, in *VisionReq, out *VisionResp) error
		Radar(ctx context.Context, in *RadarReq, out *RadarResp) error
	}
	type ActionService struct {
		actionService
	}
	h := &actionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ActionService{h}, opts...))
}

type actionServiceHandler struct {
	ActionServiceHandler
}

func (h *actionServiceHandler) Info(ctx context.Context, in *InfoReq, out *InfoResp) error {
	return h.ActionServiceHandler.Info(ctx, in, out)
}

func (h *actionServiceHandler) Rotate(ctx context.Context, in *RotateReq, out *RotateResp) error {
	return h.ActionServiceHandler.Rotate(ctx, in, out)
}

func (h *actionServiceHandler) Move(ctx context.Context, in *MoveReq, out *MoveResp) error {
	return h.ActionServiceHandler.Move(ctx, in, out)
}

func (h *actionServiceHandler) Shoot(ctx context.Context, in *ShootReq, out *ShootResp) error {
	return h.ActionServiceHandler.Shoot(ctx, in, out)
}

func (h *actionServiceHandler) Vision(ctx context.Context, in *VisionReq, out *VisionResp) error {
	return h.ActionServiceHandler.Vision(ctx, in, out)
}

func (h *actionServiceHandler) Radar(ctx context.Context, in *RadarReq, out *RadarResp) error {
	return h.ActionServiceHandler.Radar(ctx, in, out)
}
